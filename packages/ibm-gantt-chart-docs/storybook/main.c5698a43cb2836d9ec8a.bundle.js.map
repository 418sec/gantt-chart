{"version":3,"file":"main.c5698a43cb2836d9ec8a.bundle.js","sources":["webpack:///../ibm-gantt-chart/src/core/core.js"],"sourcesContent":["import 'font-awesome/css/font-awesome.css';\r\n\r\n/* eslint-disable */\r\nimport './core.scss';\r\nimport './fonts.scss';\r\n\r\nexport default class Gantt {\r\n  constructor(context, config) {\r\n    this.context = Gantt.utils.isString(context) ? document.getElementById(context) : context;\r\n    const panelClass = Gantt.components.GanttPanel.impl || Gantt.components.GanttPanel;\r\n    this.gantt = new panelClass(this.context, config);\r\n    return this.gantt;\r\n  }\r\n}\r\n\r\nGantt.defaultConfiguration = {\r\n  rowHeight: 27,\r\n  zoomFactor: 0.2,\r\n  loadingPanelThresold: 500,\r\n};\r\n\r\n// noinspection SpellCheckingInspection\r\nGantt.events = {\r\n  TITLE_CHANGED: 'titleChanged',\r\n  TABLE_INIT: 'tableinit',\r\n  TIME_TABLE_INIT: 'timesheetinit',\r\n  TIME_LINE_INIT: 'timeline_init',\r\n  TIME_WINDOW_CHANGED: 'timeWindowChanged',\r\n  TIME_LINE_RANGE_CHANGE: 'timeline_rangechange',\r\n  TIME_LINE_RANGE_CHANGED: 'timeline_rangechanged',\r\n  TIME_LINE_SIZE_CHANGED: 'timeline_sizeChanged',\r\n  TIME_LINE_PAN_MOVE: 'timeline_panmove',\r\n  TIME_LINE_PAN_MOVED: 'timeline_panmove',\r\n  TIME_LINE_SCROLLED: 'timeline_scrolled',\r\n  RESIZED: 'resized',\r\n  SPLIT_RESIZED: 'split_resized',\r\n  ROWS_FILTERED: 'rows_filtered',\r\n  DATA_LOADED: 'data_loaded',\r\n  ROWS_ADDED: 'rows_added',\r\n  ROWS_REMOVED: 'rows_removed',\r\n  ROWS_MODIFIED: 'rows_modified',\r\n  ROWS_SORTED: 'rows_sorted',\r\n\r\n  START_SELECTING: 'startSelecting',\r\n  SELECTION_CLEARED: 'selectionCleared',\r\n  STOP_SELECTING: 'stopSelecting',\r\n\r\n  // Event names are generated from the Type objects associated with the SelectionHandler, with the format type.name + 'Selected|Unselected|SelectionChanged|SelectionCleared'\r\n  ACTIVITY_SELECTED: 'activitySelected',\r\n  ACTIVITY_UNSELECTED: 'activityUnselected',\r\n  ACTIVITY_SELECTION_CHANGED: 'activitySelectionChanged',\r\n  ACTIVITY_SELECTION_CLEARED: 'activitySelectionCleared',\r\n\r\n  RESOURCE_SELECTED: 'resourceSelected',\r\n  RESOURCE_UNSELECTED: 'resourceUnselected',\r\n  RESOURCE_SELECTION_CHANGED: 'resourceSelectionChanged',\r\n  RESOURCE_SELECTION_CLEARED: 'resourceSelectionCleared',\r\n\r\n  ROW_SELECTED: 'rowSelected',\r\n  ROW_UNSELECTED: 'rowUnselected',\r\n  ROW_SELECTION_CHANGED: 'rowSelectionChanged',\r\n  ROW_SELECTION_CLEARED: 'rowSelectionCleared',\r\n\r\n  CONSTRAINT_SELECTED: 'constraintSelected',\r\n  CONSTRAINT_UNSELECTED: 'constraintUnselected',\r\n  CONSTRAINT_SELECTION_CHANGED: 'constraintSelectionChanged',\r\n  CONSTRAINT_SELECTION_CLEARED: 'constraintSelectionCleared',\r\n};\r\n\r\nGantt.type = {\r\n  ACTIVITY_CHART: 'ActivityChart',\r\n  SCHEDULE_CHART: 'ScheduleChart',\r\n};\r\n\r\nGantt.constraintTypes = {\r\n  START_TO_START: 0,\r\n  START_TO_END: 2,\r\n  END_TO_END: 3,\r\n  END_TO_START: 1,\r\n  isFromStart(type) {\r\n    return type === 0 || type === 2;\r\n  },\r\n  isToStart(type) {\r\n    return type < 2;\r\n  },\r\n};\r\n\r\nclass Tooltip {\r\n  constructor(config) {}\r\n  showTooltip(elt, ctx, cb) {}\r\n  hideTooltip() {}\r\n  destroy() {}\r\n}\r\n\r\nclass DataFetcher {\r\n  get(obj) {}\r\n}\r\n\r\nclass Split {\r\n  constructor(elt, config) {}\r\n  getLeftComponent() {}\r\n  getRightComponent() {}\r\n  leftComponentCreated() {}\r\n}\r\n\r\nclass Component {\r\n  constructor(gantt, config) {\r\n    this.gantt = gantt;\r\n    this.config = config;\r\n    this.utils = Gantt.utils;\r\n  }\r\n\r\n  on(event, handler) {\r\n    let events = this.__events || (this.__events = {});\r\n    let ar;\r\n    let eventList = (this.utils.isArray(event) && event) || event.split(' ');\r\n    for (let i = 0; i < eventList.length; i++) {\r\n      event = eventList[i];\r\n      if (!(ar = events[event])) {\r\n        events[event] = ar = [handler];\r\n      } else {\r\n        ar.push(handler);\r\n      }\r\n    }\r\n  }\r\n\r\n  one(events, handler) {\r\n    const wrapperHandler = (...params) => {\r\n      handler.apply(this, params);\r\n      // remove the handler after it has been notified\r\n      const event = params[0];\r\n      const index = this.__events[event].indexOf(wrapperHandler);\r\n      if (index > -1) {\r\n        this.__events[event].splice(index, 1);\r\n      }\r\n    };\r\n    this.on(events, wrapperHandler);\r\n  }\r\n\r\n  off(event, handler) {\r\n    if (this.__events) {\r\n      let ar, i;\r\n      let eventList = (this.utils.isArray(event) && event) || event.split(' ');\r\n      for (let iEvent = 0; iEvent < eventList.length; iEvent++) {\r\n        event = eventList[iEvent];\r\n        if ((ar = this.__events[event])) {\r\n          for (i = 0; i < ar.length; i++) {\r\n            if (ar[i] === handler) {\r\n              ar.splice(i, 1);\r\n              break;\r\n            }\r\n          }\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  triggerEvent(events) {\r\n    let ar, params;\r\n    if (events === true) {\r\n      // Apply mode, event parameters are provided as an array\r\n      events = arguments[1];\r\n      const paramsArg = arguments[2] || [];\r\n      params = new Array(paramsArg.length + 1);\r\n      for (let iParam = 0; iParam < paramsArg.length; ++iParam) {\r\n        params[iParam + 1] = paramsArg[iParam];\r\n      }\r\n    } else {\r\n      params = new Array(arguments.length);\r\n      for (let iParam = 1; iParam < arguments.length; ++iParam) {\r\n        params[iParam] = arguments[iParam];\r\n      }\r\n    }\r\n\r\n    const eventList = (this.utils.isArray(events) && events) || events.split(' ');\r\n    for (let iEvent = 0, event, evCount = eventList.length; iEvent < evCount; iEvent++) {\r\n      if ((ar = this.__events && this.__events[(params[0] = event = eventList[iEvent])])) {\r\n        for (let i = 0, count = ar.length; i < count; ) {\r\n          ar[i].apply(this, params);\r\n          // If the handler being notified still in the array, go to next array elt\r\n          if (count === ar.length) {\r\n            ++i;\r\n          } else {\r\n            // If the handler was removed during notification (see one method), next element is at same index\r\n            count = ar.length;\r\n          }\r\n        }\r\n      }\r\n    }\r\n  }\r\n}\r\n\r\nclass ErrorHandler extends Component {\r\n  constructor(config) {\r\n    super(null, config);\r\n    this.config = config;\r\n  }\r\n\r\n  addError(err) {}\r\n\r\n  hasErrors() {\r\n    return false;\r\n  }\r\n\r\n  clear() {}\r\n\r\n  showError(err) {}\r\n\r\n  getErrors() {\r\n    return [];\r\n  }\r\n\r\n  createErrorNode(err) {\r\n    const node = document.createElement('div');\r\n    node.className = 'gantt_error';\r\n    return node;\r\n  }\r\n\r\n  removeGroup(node) {}\r\n}\r\n\r\n/**\r\n *\r\n * <br>Emmits events: <ul>\r\n *   <li>Gantt.events.TIME_LINE_INIT</li>\r\n *   <li>Gantt.events.TIME_LINE_RANGE_CHANGE</li>\r\n *   <li>Gantt.events.TIME_LINE_RANGE_CHANGED</li>\r\n *   <li>Gantt.events.TIME_LINE_PAN_MOVED</li>\r\n *   <li>Gantt.events.TIME_LINE_SIZE_CHANGED</li>\r\n * </ul>\r\n */\r\nclass TimeLine extends Component {\r\n  constructor(gantt, node, config) {\r\n    super(gantt, config);\r\n    this.node = node;\r\n  }\r\n\r\n  setTimeWindow(start, end) {}\r\n\r\n  getTimeAxisHeight() {\r\n    return 0;\r\n  }\r\n\r\n  draw() {}\r\n\r\n  validateZoomFactor(zoomFactor) {}\r\n\r\n  getXFromMillis(time) {}\r\n\r\n  getDecorationContainer() {}\r\n\r\n  /**\r\n   * Returns the current time horizon, an object with two start and end time properties, time given in milliseconds\r\n   */\r\n  getHorizon() {}\r\n\r\n  getScrollableHorizon() {}\r\n\r\n  setVisibleTimeWindow(window) {}\r\n\r\n  resetZoom() {}\r\n\r\n  /**\r\n   * Markers\r\n   */\r\n  addTimeMarker(id, time, classes) {}\r\n\r\n  removeTimeMarker(id) {}\r\n\r\n  setTimeLineItem(id, item) {}\r\n\r\n  addTimeLineItem(id, item) {}\r\n\r\n  removeTimeLineItem(id) {}\r\n}\r\n\r\nclass TimeTable extends Component {\r\n  constructor(gantt, node, config) {\r\n    super(gantt, config);\r\n    this.node = node;\r\n    this.setConfiguration(config);\r\n  }\r\n  setConfiguration(config) {}\r\n\r\n  draw() {}\r\n\r\n  createUpdates(parent) {\r\n    return new (Gantt.components.GanttUpdates.impl || Gantt.components.GanttUpdates)(parent);\r\n  }\r\n\r\n  highlightRow(row, highlight, deselectAll) {}\r\n\r\n  getDisplayedActivitiesTimeRange() {}\r\n\r\n  searchActivities(row, callback) {}\r\n\r\n  setConstraints(constraints) {}\r\n\r\n  update() {}\r\n\r\n  scrollToRow(row) {}\r\n\r\n  scrollToY(y) {}\r\n\r\n  setScrollTop(y) {}\r\n\r\n  setFirstVisibleRow(row) {}\r\n\r\n  getScrollLeft() {}\r\n  setScrollLeft(x) {}\r\n\r\n  /**\r\n   * Returns the component responsible for scrolling the time table.\r\n   */\r\n  getScroller() {}\r\n  getVisibleWidth() {}\r\n  getVisibleHeight() {}\r\n\r\n  // Called to adjust the time table body width according to the time line width\r\n  setBodyWidth(w) {}\r\n  getBodyWidth() {}\r\n\r\n  // Called to adjust the height of the time  table body according to the height of the gantt table\r\n  setBodyHeight(h) {}\r\n  getBodyHeight() {}\r\n\r\n  // To perfectly horizontally align the time line and the time table, we need to apply a right margin\r\n  // to the time line corresponding to the width of the vertical scroller in the time table, if any.\r\n  getRightMargin() {}\r\n\r\n  // The time line bottom must stops where the horizontal scrollbar of the time table starts.\r\n  // The getBottomMargin returns the height of this scrollbar.\r\n  getBottomMargin() {}\r\n}\r\n\r\n/**\r\n *\r\n * <br>Emmits events: <ul>\r\n *   <li>Gantt.events.TABLE_INIT</li>\r\n *   <li>Gantt.events.ROWS_ADDED</li>\r\n *   <li>Gantt.events.ROWS_REMOVED</li>\r\n *   <li>Gantt.events.ROWS_MODIFIED</li>\r\n *   <li>Gantt.events.ROWS_FILTERED</li>\r\n * </ul>\r\n */\r\nclass TreeTable extends Component {\r\n  constructor(gantt, node, config) {\r\n    super(gantt, config);\r\n    this.node = node;\r\n  }\r\n\r\n  setRows(rows) {}\r\n\r\n  getRowCount() {\r\n    return 0;\r\n  }\r\n\r\n  isRowVisible(param) {}\r\n\r\n  deleteDrawCache() {}\r\n\r\n  draw() {}\r\n\r\n  drawRows(selector) {}\r\n\r\n  createUpdates(parent) {\r\n    return new (Gantt.components.GanttUpdates.impl || Gantt.components.GanttUpdates)(parent);\r\n  }\r\n\r\n  highlightRow(row, highlight, deselectAll) {}\r\n\r\n  setRowFilter(filter) {}\r\n\r\n  filterChanged() {}\r\n\r\n  isRowFiltered(row) {\r\n    return false;\r\n  }\r\n\r\n  toggleCollapseRow(param, collapse) {}\r\n\r\n  setHeaderHeight(height) {}\r\n\r\n  getTableBody() {}\r\n\r\n  getScrollableTable() {}\r\n\r\n  getTop(tr) {\r\n    return (tr && tr.offsetTop - this.getTableBody().offsetTop) || 0;\r\n  }\r\n\r\n  getRowAt(y) {}\r\n\r\n  getHeight() {}\r\n\r\n  nextRow(row) {\r\n    return null;\r\n  }\r\n\r\n  getRow(id) {\r\n    return null;\r\n  }\r\n\r\n  getRows(selector) {}\r\n\r\n  getRowName(row) {\r\n    return row.name;\r\n  }\r\n\r\n  getRowTop(row) {\r\n    return (row.tr && row.tr.offsetTop - this.getTableBody().offsetTop) || 0;\r\n  }\r\n\r\n  expandParents(row) {}\r\n}\r\n\r\nTreeTable.defaultClass = '';\r\n\r\nclass GanttModel extends Component {\r\n  constructor(gantt, config) {\r\n    super(gantt, config);\r\n    if (config) {\r\n      this.setConfiguration(config);\r\n    }\r\n  }\r\n\r\n  setConfiguration(config) {}\r\n}\r\n\r\n/**\r\n *\r\n * <br>Emmits events: <ul>\r\n *   <li>Gantt.events.TABLE_INIT</li>\r\n *   <li>Gantt.events.ROWS_ADDED</li>\r\n *   <li>Gantt.events.ROWS_REMOVED</li>\r\n *   <li>Gantt.events.ROWS_MODIFIED</li>\r\n *   <li>Gantt.events.ROWS_FILTERED</li>\r\n * </ul>\r\n */\r\nclass GanttPanel extends Component {\r\n  constructor(node, config) {\r\n    super(node, config);\r\n    this.node = node;\r\n    this.events = Gantt.events;\r\n    this.constraintTypes = Gantt.constraintTypes;\r\n  }\r\n\r\n  setConfiguration(config) {}\r\n\r\n  draw() {}\r\n\r\n  startUpdating() {}\r\n\r\n  stopUpdating() {}\r\n\r\n  getModel() {}\r\n\r\n  getRowCount() {\r\n    return 0;\r\n  }\r\n\r\n  getRow(param) {\r\n    return null;\r\n  }\r\n\r\n  getVisiibleRows() {\r\n    return [];\r\n  }\r\n\r\n  ensureRowVisible(param) {}\r\n\r\n  isRowVisible(param) {}\r\n\r\n  getFirstVisibleRow() {}\r\n\r\n  setFirstVisibleRow(row) {}\r\n\r\n  isRowFiltered(param) {}\r\n\r\n  toggleCollapseRow(param, collapse) {}\r\n\r\n  scrollToY(y) {}\r\n\r\n  getRowActivities(param) {}\r\n\r\n  resetZoom() {}\r\n\r\n  zoomIn(evt) {}\r\n\r\n  zoomOut(evt) {}\r\n\r\n  zoom(zoomFactor, evt) {}\r\n\r\n  fitToContent() {}\r\n\r\n  getVisibleHeight() {\r\n    return 0;\r\n  }\r\n\r\n  highlightRow(row, highlight, deselectAll) {}\r\n\r\n  /*                        */\r\n  /*    Search and filter   */\r\n  /*                        */\r\n  addFilter(rowFilter, rows, activities) {}\r\n\r\n  addFilter(rowFilter, filterTasks) {}\r\n\r\n  removeFilter(key, preventNotify) {}\r\n\r\n  search(text, rows, activities) {}\r\n\r\n  setHideEmptyRows(hide, preventNotify) {}\r\n\r\n  /*                        */\r\n  /*          Utils         */\r\n  /*                        */\r\n}\r\n\r\nclass Filter {\r\n  constructor(options) {}\r\n}\r\n\r\nclass Renderer {\r\n  constructor(config, proto, paletteHandler) {\r\n    if (proto) {\r\n      Gantt.utils.mergeObjects(this, proto);\r\n    }\r\n    this.config = config;\r\n    this.paletteHandler = paletteHandler;\r\n    this.setConfiguration(config);\r\n  }\r\n\r\n  setConfiguration(config) {}\r\n}\r\n\r\nclass ActivityLayout {\r\n  constructor(config) {}\r\n\r\n  layout(row) {}\r\n\r\n  allowVariableRowHeight() {\r\n    return false;\r\n  }\r\n}\r\n\r\nGantt.ObjectTypes = {\r\n  Activity: 2,\r\n  Resource: 4,\r\n  Row: 1,\r\n  Constraint: 8,\r\n  Reservation: 16,\r\n};\r\n\r\nclass SelectionHandler extends Component {\r\n  constructor(config, proto) {\r\n    super(null, config);\r\n    this.selections = [];\r\n    this.selectionType = null;\r\n    if (proto) {\r\n      Gantt.utils.mergeObjects(this, proto);\r\n    }\r\n    this.setConfiguration(config);\r\n  }\r\n\r\n  setConfiguration(config) {}\r\n\r\n  getObjectType(obj) {}\r\n\r\n  select(obj, clear, notActive) {}\r\n\r\n  clearSelection() {\r\n    this.selections = [];\r\n  }\r\n\r\n  isSelected(obj) {\r\n    return this.selections.indexOf(obj) >= 0;\r\n  }\r\n\r\n  processClick(e, obj) {}\r\n\r\n  destroy() {\r\n    this.selections = [];\r\n  }\r\n}\r\n\r\nclass LayoutSynchronizer extends Component {\r\n  constructor(config, proto) {\r\n    super(null, config);\r\n    if (proto) {\r\n      Gantt.utils.mergeObjects(this, proto || config);\r\n    }\r\n    this.setConfiguration(config);\r\n  }\r\n\r\n  setConfiguration(config) {}\r\n\r\n  connect(gantt) {}\r\n\r\n  disconnect() {}\r\n\r\n  destroy() {\r\n    this.disconnect();\r\n  }\r\n}\r\n\r\nclass Palette {\r\n  constructor(config) {}\r\n  getColors(count) {}\r\n}\r\n\r\nGantt.defaultPaletteName = null;\r\nGantt.defaultPalettes = {};\r\n\r\nclass GanttUpdates {\r\n  constructor(parent) {\r\n    this.parent = parent;\r\n  }\r\n\r\n  addUpdate(update) {}\r\n\r\n  removeUpdate(update) {}\r\n\r\n  reload() {\r\n    this._reload = true;\r\n  }\r\n  isReload() {\r\n    return false;\r\n  }\r\n  destroy() {}\r\n  startUpdating() {}\r\n  stopUpdating() {}\r\n}\r\n\r\nclass Toolbar extends Component {\r\n  constructor(gantt, node, config) {\r\n    super(gantt, config);\r\n    this.node = node;\r\n    this.setConfiguration(config, node);\r\n  }\r\n\r\n  setConfiguration(config, node) {\r\n    this.config = config;\r\n  }\r\n\r\n  connect(gantt) {}\r\n\r\n  ganttLoaded(gantt, rows) {}\r\n\r\n  onInitialized() {}\r\n\r\n  destroy() {}\r\n}\r\n\r\nToolbar.createTitle = function(title) {\r\n  const node = document.createElement('div');\r\n  node.innerHTML = title;\r\n  node.className = 'toolbar-title';\r\n  return node;\r\n};\r\n\r\nclass Button extends Component {\r\n  constructor(gantt, config) {\r\n    super(gantt, config);\r\n    this.callbacks = [];\r\n    this.setConfiguration(config);\r\n  }\r\n\r\n  setConfiguration(config) {\r\n    const btn = document.createElement('div');\r\n    if (config.id) {\r\n      btn.id = config.id;\r\n    }\r\n    btn.className = `toolbar-button g-hoverable g-selectable${config.classes ? ' ' + config.classes : ''}`;\r\n    if (config.icon) {\r\n      const img = document.createElement('img');\r\n      img.src = config.icon;\r\n      img.alt = '';\r\n      btn.appendChild(img);\r\n    }\r\n    if (config.fontIcon) {\r\n      const fontIcon = document.createElement('i');\r\n      fontIcon.className = config.fontIcon + (config.text ? ' fa-fw' : '');\r\n      btn.appendChild(fontIcon);\r\n    }\r\n    if (config.svg) {\r\n      Gantt.utils.appendSVG(btn, config.svg);\r\n    }\r\n    if (config.text) {\r\n      btn.appendChild(document.createTextNode(config.text));\r\n    }\r\n    this.node = btn;\r\n    this.node.onclick = e => {\r\n      this.clicked(e);\r\n      this.callbacks.map(cb => {\r\n        cb({ gantt: this.gantt, event: e });\r\n      });\r\n    };\r\n    if (config.onclick) {\r\n      this.onclick(config.onclick);\r\n    }\r\n    return btn;\r\n  }\r\n\r\n  onclick(callback) {\r\n    this.callbacks.push(callback);\r\n  }\r\n\r\n  clicked(e) {}\r\n\r\n  setId(id) {\r\n    this.node.id = id;\r\n  }\r\n\r\n  update() {}\r\n\r\n  setSelected(selected) {\r\n    Gantt.utils.toggleClass(this.node, 'selected', selected);\r\n  }\r\n}\r\n\r\nclass CheckBox extends Component {\r\n  constructor(gantt, config) {\r\n    super(gantt, config);\r\n    this.setConfiguration(config);\r\n  }\r\n\r\n  setConfiguration(config) {\r\n    const ctnr = (this.node = document.createElement('div'));\r\n    ctnr.style.whiteSpace = 'nowrap';\r\n    const input = (this.inputNode = document.createElement('input'));\r\n    input.setAttribute('type', 'checkbox');\r\n    input.setAttribute('value', 'None');\r\n    input.className = 'g-selectable g-hoverable';\r\n    if (config.id) {\r\n      input.id = id;\r\n    }\r\n    if (config.classes) {\r\n      ctnr.className = config.classes;\r\n    }\r\n    ctnr.appendChild(input);\r\n    const label = document.createElement('label');\r\n    if (config.id) {\r\n      label.setAttribute('for', config.id);\r\n    }\r\n    if (config.icon) {\r\n      const img = document.createElement('img');\r\n      img.src = config.icon;\r\n      img.alt = '';\r\n      label.appendChild(img);\r\n    }\r\n    if (config.svg) {\r\n      Gantt.utils.appendSVG(label, config.svg);\r\n    }\r\n    if (config.text) {\r\n      label.appendChild(document.createTextNode(config.text));\r\n    }\r\n    if (config.onclick) {\r\n      this.onclick(config.onclick);\r\n    }\r\n    ctnr.appendChild(label);\r\n    return ctnr;\r\n  }\r\n\r\n  setChecked(checked) {\r\n    this.inputNode.checked = checked;\r\n  }\r\n\r\n  onclick(callback) {\r\n    this.inputNode.onclick = e => {\r\n      callback(this.inputNode.checked, { gantt: this.gantt, event: e });\r\n    };\r\n  }\r\n\r\n  update() {}\r\n\r\n  setId(id) {\r\n    this.inputNode.id = id;\r\n  }\r\n}\r\n\r\nCheckBox.defaultClass = null;\r\n\r\nclass Toggle extends Component {\r\n  constructor(gantt, config) {\r\n    super(gantt, config);\r\n    this.setConfiguration(config);\r\n  }\r\n\r\n  setConfiguration(config) {\r\n    this.callbacks = [];\r\n    const ctnr = (this._node = document.createElement('div'));\r\n    this._isSel = config.isSelected && config.isSelected(this.gantt);\r\n    this.btnUnselected = new (Gantt.components.Button.impl || Gantt.components.Button)(this.gantt, config.unselected);\r\n    this.btnSelected = new (Gantt.components.Button.impl || Gantt.components.Button)(this.gantt, config.selected);\r\n    ctnr.appendChild(this._isSel ? this.btnSelected.node : this.btnUnselected.node);\r\n    if (config.id) {\r\n      ctnr.id = id;\r\n    }\r\n    const onclick = e => {\r\n      this._isSel = !this._isSel;\r\n      this.updateButtons(this._isSel);\r\n      this.callbacks.forEach(c => {\r\n        c(this._isSel, { gantt: this.gantt, event: e });\r\n      });\r\n    };\r\n    this.btnUnselected.node.onclick = this.btnSelected.node.onclick = onclick;\r\n    if (config.onclick) {\r\n      this.onclick(config.onclick);\r\n    }\r\n    return ctnr;\r\n  }\r\n\r\n  isSelected() {\r\n    return this._isSel;\r\n  }\r\n\r\n  setSelected(selected) {\r\n    this._isSel = selected;\r\n    this.updateButtons(selected);\r\n  }\r\n\r\n  get node() {\r\n    return this._node;\r\n  }\r\n\r\n  set node(node) {\r\n    this._node = node;\r\n  }\r\n\r\n  onclick(callback) {\r\n    this.callbacks.push(callback);\r\n  }\r\n\r\n  update() {\r\n    this.updateButtons(this.config.isSelected ? (this._isSel = this.config.isSelected(this.gantt)) : this._isSel);\r\n  }\r\n\r\n  updateButtons(isSel) {\r\n    if (this.btnSelected.node.parentNode) {\r\n      if (!isSel) this._node.replaceChild(this.btnUnselected.node, this.btnSelected.node);\r\n    } else if (this.btnUnselected.node.parentNode) {\r\n      this._node.replaceChild(this.btnSelected.node, this.btnUnselected.node);\r\n    }\r\n  }\r\n}\r\n\r\nToggle.defaultClass = null;\r\n\r\nclass DropDownList extends Component {\r\n  constructor(gantt, config) {\r\n    super(gantt, config);\r\n    this.setConfiguration(config);\r\n  }\r\n\r\n  setConfiguration(config) {\r\n    const node = (this.node = document.createElement('div'));\r\n    const defaultClass = DropDownList.defaultClass;\r\n    if (defaultClass) {\r\n      node.className = defaultClass;\r\n    }\r\n    if (config.classes) {\r\n      Gantt.utils.addClass(node, config.classes);\r\n    }\r\n    if (config.text || config.icon || config.fontIcon) {\r\n      const labelNode = document.createElement('div');\r\n      labelNode.className = 'label';\r\n      if (config.icon) {\r\n        const img = document.createElement('img');\r\n        img.src = config.icon;\r\n        img.alt = '';\r\n        labelNode.appendChild(img);\r\n      }\r\n      if (config.fontIcon) {\r\n        const fontIcon = document.createElement('i');\r\n        fontIcon.className = config.fontIcon + (config.text ? ' fa-fw' : '');\r\n        labelNode.appendChild(fontIcon);\r\n      }\r\n      if (config.text) {\r\n        labelNode.appendChild(document.createTextNode(config.text));\r\n      }\r\n      node.appendChild(labelNode);\r\n    }\r\n    const select = (this.selectNode = document.createElement('select'));\r\n    select.className = 'g-hoverable';\r\n    for (let i = 0, count = config.options.length, opt, optNode; i < count; i++) {\r\n      opt = config.options[i];\r\n      optNode = document.createElement('option');\r\n      optNode.text = opt.text;\r\n      optNode.value = opt.value;\r\n      select.appendChild(optNode);\r\n    }\r\n    node.appendChild(select);\r\n    if (config.onchange) {\r\n      this.onchange(config.onchange);\r\n    }\r\n    return node;\r\n  }\r\n\r\n  select(value) {\r\n    this.selectNode.value = value;\r\n  }\r\n\r\n  onchange(callback) {\r\n    this.selectNode.onchange = e => {\r\n      callback(this.selectNode.value, { gantt: this.gantt, event: e });\r\n    };\r\n  }\r\n\r\n  update() {}\r\n\r\n  setId(id) {\r\n    this.selectNode.id = id;\r\n  }\r\n}\r\n\r\nDropDownList.defaultClass = 'dropdown-list';\r\n\r\nclass Input extends Component {\r\n  constructor(gantt, config) {\r\n    super(gantt, config);\r\n    this.setConfiguration(config);\r\n  }\r\n\r\n  setConfiguration(config) {\r\n    const node = (this.node = document.createElement('div'));\r\n    if (Input.defaultClass) {\r\n      node.className = Input.defaultClass;\r\n    }\r\n    if (config.classes) {\r\n      Gantt.utils.addClass(node, config.classes);\r\n    }\r\n    node.style.display = 'flex';\r\n    node.style.flexDirection = 'row';\r\n    node.style.alignItems = 'center';\r\n\r\n    if (config.text || config.icon || config.fontIcon || config.type === 'search') {\r\n      const labelNode = document.createElement('div');\r\n      labelNode.className = 'label';\r\n      labelNode.style.display = 'inline-block';\r\n      if (config.icon) {\r\n        const img = document.createElement('img');\r\n        img.src = config.icon;\r\n        img.alt = '';\r\n        labelNode.appendChild(img);\r\n      }\r\n      if (config.fontIcon) {\r\n        const fontIcon = document.createElement('i');\r\n        fontIcon.className = config.fontIcon + (config.text ? ' fa-fw' : '');\r\n        fontIcon.setAttribute('aria-disabled', true);\r\n        labelNode.appendChild(fontIcon);\r\n      } else if (config.type === 'search') {\r\n        const fontIcon = document.createElement('i');\r\n        fontIcon.setAttribute('aria-disabled', true);\r\n        fontIcon.className = `fa fa-search fa-lg${config.text ? ' fa-fw' : ''}`;\r\n        labelNode.appendChild(fontIcon);\r\n      }\r\n      if (config.text) {\r\n        labelNode.appendChild(document.createTextNode(config.text));\r\n      }\r\n      node.appendChild(labelNode);\r\n    }\r\n    const input = (this.inputNode = document.createElement('input'));\r\n    node.appendChild(input);\r\n\r\n    const deleteBtn = document.createElement('div');\r\n    deleteBtn.className = 'delete-button';\r\n    deleteBtn.display = 'inline-block';\r\n    const deleteIcon = document.createElement('i');\r\n    deleteIcon.className = 'fa fa-times fa-lg';\r\n    deleteBtn.appendChild(deleteIcon);\r\n    node.appendChild(deleteBtn);\r\n    deleteBtn.onclick = () => {\r\n      input.value = '';\r\n      if ('createEvent' in document) {\r\n        let evt = document.createEvent('HTMLEvents');\r\n        evt.initEvent('change', false, true);\r\n        input.dispatchEvent(evt);\r\n      } else {\r\n        input.fireEvent('onchange');\r\n      }\r\n    };\r\n\r\n    if (config.onchange) {\r\n      this.onchange(config.onchange);\r\n    }\r\n    return node;\r\n  }\r\n\r\n  setText(value) {\r\n    this.input.value = value;\r\n  }\r\n\r\n  onchange(userCallback) {\r\n    const callback = e => {\r\n      userCallback(this.inputNode.value, { gantt: this.gantt, event: e });\r\n    };\r\n    this.inputNode.onchange = callback;\r\n    this.inputNode.onkeyup = callback;\r\n  }\r\n\r\n  setId(id) {\r\n    this.inputNode.id = id;\r\n  }\r\n}\r\n\r\nInput.defaultClass = 'input-box';\r\n\r\nclass ButtonGroup extends Component {\r\n  constructor(gantt, config) {\r\n    super(gantt, config);\r\n    this.selected = null;\r\n    this.callbacks = [];\r\n    this.setConfiguration(config);\r\n  }\r\n\r\n  setConfiguration(config) {\r\n    const node = (this.node = document.createElement('div'));\r\n    if (config.classes) {\r\n      node.className = config.classes;\r\n    }\r\n    this.buttons = [];\r\n    Gantt.utils.addClass(node, 'button-group');\r\n    node.style.display = 'flex';\r\n    node.style.flexDirection = 'row';\r\n    node.style.alignItems = 'center';\r\n\r\n    const self = this;\r\n    function installBtnClicked(button) {\r\n      button.clicked = () => {\r\n        self.setSelected(button);\r\n      };\r\n    }\r\n\r\n    this.value = null;\r\n    let cfgBtns = config.buttons;\r\n    for (let i = 0; i < cfgBtns.length; ++i) {\r\n      let btn = new (Gantt.components.Button.impl || Gantt.components.Button)(this.gantt, cfgBtns[i]);\r\n      this.buttons.push(btn);\r\n      installBtnClicked(btn);\r\n      if (cfgBtns[i].selected) {\r\n        this.selected = btn;\r\n        btn.setSelected(true);\r\n        this.value = btn.value;\r\n      }\r\n      btn.value = cfgBtns[i].value;\r\n      node.appendChild(btn.node);\r\n    }\r\n    if (config.onchange) {\r\n      this.onchange(config.onchange);\r\n    }\r\n    if (config.value !== undefined) {\r\n      this.setValue(config.value);\r\n    }\r\n    return node;\r\n  }\r\n\r\n  setValue(value, noNotify) {\r\n    for (let i = 0; i < this.buttons.length; i++) {\r\n      if (this.buttons[i].value === value) {\r\n        this.setSelected(this.buttons[i], noNotify);\r\n        break;\r\n      }\r\n    }\r\n  }\r\n\r\n  getValue() {\r\n    return this.value;\r\n  }\r\n\r\n  setSelected(btn, noNotify) {\r\n    if (this.selected !== btn) {\r\n      if (this.selected) {\r\n        this.selected.setSelected(false);\r\n      }\r\n      this.selected = btn;\r\n      if (btn) {\r\n        this.value = btn.value;\r\n        btn.setSelected(true);\r\n      } else {\r\n        this.value = null;\r\n      }\r\n      if (!noNotify) {\r\n        this.callbacks.map(cb => {\r\n          cb(this.value);\r\n        });\r\n      }\r\n    }\r\n  }\r\n\r\n  onchange(userCallback) {\r\n    this.callbacks.push(userCallback);\r\n  }\r\n\r\n  setId(id) {\r\n    this.inputNode.id = id;\r\n  }\r\n}\r\n\r\nclass LoadResourceChart extends Component {\r\n  constructor(gantt, node, config) {\r\n    super(gantt, node, config);\r\n    this.node = node;\r\n    this.setConfiguration(config);\r\n  }\r\n\r\n  setConfiguration(config) {}\r\n\r\n  setVisible(visible) {}\r\n  setScrollLeft(left) {}\r\n}\r\n\r\nclass ConstraintsGraph extends Component {\r\n  constructor(gantt, node, config) {\r\n    super(gantt, node, config);\r\n    this.node = node;\r\n    this.setConfiguration(config);\r\n  }\r\n\r\n  setConfiguration(config) {}\r\n  setConstraints(cts) {}\r\n  setNode(node) {}\r\n}\r\n\r\nclass ConstraintLayout extends Component {\r\n  constructor(gantt, config) {\r\n    super(gantt, null, config);\r\n    this.setConfiguration(config);\r\n  }\r\n\r\n  setConfiguration(config) {}\r\n  startInitialize() {}\r\n  addNode(node) {}\r\n  addConstraint(nodeFrom, nodeTo, cons) {}\r\n  stopInitialize() {}\r\n  forEachLink(node, cb) {}\r\n  layoutNode(node) {}\r\n  layoutRowNodeLinks(rowIndex) {}\r\n  drawRowLinks(rowIndex, parentElt, renderer, ctx) {}\r\n}\r\n\r\nGantt.components = {\r\n  Component,\r\n  GanttPanel,\r\n  GanttModel,\r\n  TreeTable,\r\n  TimeLine,\r\n  TimeTable,\r\n  Split,\r\n  Tooltip,\r\n  Filter,\r\n  DataFetcher,\r\n  ErrorHandler,\r\n  Renderer,\r\n  ActivityLayout,\r\n  SelectionHandler,\r\n  LayoutSynchronizer,\r\n  GanttUpdates,\r\n  Palette,\r\n  Toolbar,\r\n  Button,\r\n  CheckBox,\r\n  Toggle,\r\n  DropDownList,\r\n  Input,\r\n  ButtonGroup,\r\n  LoadResourceChart,\r\n  ConstraintsGraph,\r\n  ConstraintLayout,\r\n};\r\n\r\nGantt.envReady = function() {\r\n  return Promise.resolve(true);\r\n};\r\n\r\nif (module.hot) {\r\n  module.hot.accept();\r\n}\r\n"],"mappings":"AAMA","sourceRoot":""}